{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useHttp } from '../hooks/http.hook';\nconst useMarvelService = () => {\n  _s();\n  // Destructure the loading, request, error, and clearError from the useHttp hook\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n\n  // API base URL, API key, and base offset for pagination\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=21df14dcc07eb82a2f81dda74a7be47f';\n  const _baseOffset = 210;\n\n  // Function to get all characters with pagination support\n  const getAllCharacters = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  // Function to get a single character by ID\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  // Function to get all comics with pagination support\n  const getAllComics = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  // Function to get a single comic by ID\n  const getComics = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  // Transformation function for character data\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  // Transformation function for comic data\n  const _transformComics = comics => {\n    var _comics$textObjects$, _comics$prices$;\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: ((_comics$textObjects$ = comics.textObjects[0]) === null || _comics$textObjects$ === void 0 ? void 0 : _comics$textObjects$.language) || \"en-us\",\n      price: (_comics$prices$ = comics.prices[0]) !== null && _comics$prices$ !== void 0 && _comics$prices$.price ? `${comics.prices[0].price}$` : \"not available\"\n    };\n  };\n\n  // Return the loading state, error state, clearError function, and all the API functions\n  return {\n    loading,\n    error,\n    clearError,\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComics\n  };\n};\n_s(useMarvelService, \"uUyY7lUIwkf2no8vbgFvZlrZhN4=\", false, function () {\n  return [useHttp];\n});\nexport default useMarvelService;","map":{"version":3,"names":["useHttp","useMarvelService","_s","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","arguments","length","undefined","res","data","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","char","name","description","slice","thumbnail","path","extension","homepage","urls","url","wiki","comics","items","_comics$textObjects$","_comics$prices$","title","pageCount","language","textObjects","price","prices"],"sources":["C:/Work/Практика/Обучение Edemu JS/Темы/Marvel/marvel_starter/src/services/MarvelService.js"],"sourcesContent":["import { useHttp } from '../hooks/http.hook';\r\nconst useMarvelService = () => {\r\n    // Destructure the loading, request, error, and clearError from the useHttp hook\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    // API base URL, API key, and base offset for pagination\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=21df14dcc07eb82a2f81dda74a7be47f';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    // Function to get all characters with pagination support\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    // Function to get a single character by ID\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    // Function to get all comics with pagination support\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    // Function to get a single comic by ID\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    // Transformation function for character data\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    // Transformation function for comic data\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0]?.price ? `${comics.prices[0].price}$` : \"not available\",\r\n        };\r\n    };\r\n\r\n    // Return the loading state, error state, clearError function, and all the API functions\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComics,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}