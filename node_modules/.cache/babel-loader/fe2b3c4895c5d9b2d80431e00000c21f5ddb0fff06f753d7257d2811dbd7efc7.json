{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n  // State variables for loading and error\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // The request function for making HTTP requests\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-Type': 'application/json'\n    };\n    setLoading(true);\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"names":["useState","useCallback","useHttp","_s","loading","setLoading","error","setError","request","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"sources":["C:/Work/Практика/Обучение Edemu JS/Темы/Marvel/marvel_starter/src/hooks/http.hook.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nexport const useHttp = () => {\r\n    // State variables for loading and error\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // The request function for making HTTP requests\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n    \r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMQ,OAAO,GAAGP,WAAW,CAAC,gBAAOQ,GAAG,EAAoF;IAAA,IAAlFC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IAAEI,OAAO,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACjHN,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;QAAEC,MAAM;QAAEI,IAAI;QAAEC;MAAQ,CAAC,CAAC;MAE5D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,mBAAkBV,GAAI,aAAYO,QAAQ,CAACI,MAAO,EAAC,CAAC;MACzE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElCjB,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOgB,IAAI;IACf,CAAC,CAAC,OAAOE,CAAC,EAAE;MACRlB,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAACgB,CAAC,CAACC,OAAO,CAAC;MACnB,MAAMD,CAAC;IACX;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,UAAU,GAAGxB,WAAW,CAAC,MAAMM,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EAExD,OAAO;IAAEH,OAAO;IAAEI,OAAO;IAAEF,KAAK;IAAEmB;EAAW,CAAC;AAElD,CAAC;AAAAtB,EAAA,CA/BYD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}